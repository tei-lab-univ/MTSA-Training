/****************************
 環境モデル
 ****************************/

/* ALERT */
ALERT = STATE0,
STATE0 = (alert -> STATE1),
STATE1 = (all_clear -> STATE0).

||ALERT_MODEL= (ALERT).

//-----

/* ROOM */

//解１
/*
ROOM = STATE0,
STATE0 = (reqEnter -> STATE1),
STATE1 = (allow -> STATE2 | deny -> STATE0),
STATE2 = (arrive[1] -> STATE3),
STATE3 = (reqEnter -> STATE4 |leave[0] -> STATE0),
STATE4 = (allow -> STATE5 | deny -> STATE3),
STATE5 = (arrive[2] -> STATE6),
STATE6 = (reqEnter -> STATE7 |leave[1] -> STATE3),
STATE7 = (deny -> STATE6).
*/

//解２
const X = 5 //変数
range N = 0..X //変数の範囲の宣言 ... 有限数の状態しか扱えない

ROOM = STATE0[0],
STATE0[n:N] = (reqEnter -> STATE1[n]
			  |when(n > 0) leave[n-1] -> STATE0[n-1]),
STATE1[n:N] = (when(n < X) allow -> arrive[n+1] -> STATE0[n+1]
			  |deny -> STATE0[n]).

||ROOM_MODEL= (ROOM).


/*並列合成*/
||ALL_MODEL = (ALERT || ROOM).



/****************************
 監視モデル（要求）
 ****************************/

/*【問題1】常にarrive.2をしてはいけない*/
ltl_property SAFETY1 = [](!arrive[2])


/*【問題2】非常時（alertしてからall_clearするまで）は新たに人を入室（allow）しない*/
//ltl_property SAFETY2 = [](alert -> X(!allow W all_clear)) //常に([])alertの次(X)以降ならば，all_clearするまで(W)allowしない(!)

//fluent EMERGENCY = <alert, all_clear> //alertしてからall_clearするまでの間"ture"
//ltl_property SAFETY2 = [](EMERGENCY -> !allow) //EMERGENCYがtrueならば，allowしない


/*【問題3】満員の2人以上いる場合でない限り（arrive.2してからleaveするまででないとき）denyしない*/
//ltl_property SAFETY3 = [](alert -> X(!allow W all_clear)) //常に([])alertの次(X)以降ならば，all_clearするまで(W)allowしない(!)


controllerSpec Requirement =
{
	safety       = {SAFETY2}
	controllable = {allow, deny}
}

controller ||Controller = (ALL_MODEL)~{Requirement}.

