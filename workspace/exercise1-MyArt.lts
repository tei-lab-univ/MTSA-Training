/*

Exercise - 1
環境
つながった部屋が2部屋(A,B)あり部屋の定員はそれぞれ５人

要求
Aから入りBに一度入ったらAに戻ることができない。
Aは２人まで、Bは３人まで

*/
const K = 5
range N = 0..K

set VisitorAction = {reqEnter_A, reqEnter_B, reqOut}
set AllowAction = {allow_A, allow_B, allow_Out}
set DenyAction = {deny_A, deny_B, deny_Out}
set MonitorAction = {arrive_A[1..K], arrive_B[1..K]}
set DoorAction = {AllowAction, DenyAction, resRoomStatus}

set ControllableActions = {DoorAction}


//*****************************************************************************
// Environment
//*****************************************************************************
ROOM_A = ROOM_A[0],
ROOM_A[n:N] = 
(
	when (n<K)allow_A -> arrive_A[n+1] -> ROOM_A[n+1] 
	| when (n<K)deny_B -> arrive_A[n+1] -> ROOM_A[n+1]
	| when (n>0)reqEnter_B -> ROOM_A[n-1]
).

ROOM_B = ROOM_B[0],
ROOM_B[n:N] =
(
	when(n<K) allow_B -> arrive_B[n+1] -> ROOM_B[n+1]
	| when(n<K) deny_Out -> arrive_B[n+1] -> ROOM_B[n+1]
	| when(n>0) reqOut -> ROOM_B[n-1]
).

VISITOR = VISIT,
VISIT = (
	reqEnter_A -> resRoomStatus -> CHECK_A
	| reqEnter_B -> resRoomStatus -> CHECK_B
	| reqOut -> resRoomStatus -> CHECK_OUT
),
CHECK_A = (allow_A -> arrive_A[1..K] -> VISIT | deny_A -> VISIT),
CHECK_B = (allow_B -> arrive_B[1..K] -> VISIT | deny_B -> arrive_A[1..K] -> VISIT),
CHECK_OUT = (allow_Out -> VISIT | deny_Out -> arrive_B[1..K] -> VISIT).

||Environment = (VISITOR || ROOM_A || ROOM_B).


//*****************************************************************************
// Requirement
//*****************************************************************************

ltl_property SAFETY1 = [](!arrive_A[3])
ltl_property SAFETY2 = [](!arrive_B[4])


//*****************************************************************************
// Controller
//*****************************************************************************

controllerSpec Requirement = 
{
	safety = {SAFETY1, SAFETY2}
	controllable = {ControllableActions}
}

controller ||Controller = (Environment)~{Requirement}.











